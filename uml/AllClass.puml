@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + getLocationX():int
    + getLocationY():int
    + setLocation(double locationX, double locationY):void
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    - shootStrategy:ShootStrategy

    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + setStrategy(ShootStrategy shootStrategy):void
    + getStrategy():ShootStrategy
    + doShoot(int locationX, int locationY, int speedX, int speedY, int direction):List<BaseBullet>
    + decreaseHp(int decrease):void
    + getHp():int
    + getMaxHp():int
    + {abstract} shoot():List<BaseBullet>
    + {abstract} createProps():List<BaseProp>
 }

abstract class AbstractEnemyAircraft{
    # direction:int
    # propNum:int

    + AbstractEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + getSpeedX():int
    + shoot():List<BaseBullet>
    + createProps():List<BaseProp>
}
AbstractAircraft <|-- AbstractEnemyAircraft

class HeroAircraft {
    - direction:int
    - {static} heroAircraft:HeroAircraft

    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static}getHeroAircraft():HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
    + createProps():List<BaseProp>
}
AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + update():void
}
AbstractEnemyAircraft <|-- MobEnemy

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + update():void
}
AbstractEnemyAircraft <|-- EliteEnemy

class ElitePlusEnemy{
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + update():void
}
AbstractEnemyAircraft <|-- ElitePlusEnemy

class BossEnemy{
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
}
AbstractEnemyAircraft <|-- BossEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
}
BaseBullet <|-- HeroBullet

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + update():void
}
BaseBullet <|-- EnemyBullet

abstract class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
	+ {abstract} effect(AbstractAircraft aircraft):void
}

class BloodProp
{
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
	+ effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BloodProp

class BombProp
{
    - observerList:List<Observer>

    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + addObserver(Observer observer):void
    + notifyAllFlyings():void
	+ effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BombProp

class BulletProp
{
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
	+ effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BulletProp

class BulletPlusProp
{
    + BulletPlusProp(int locationX, int locationY, int speedX, int speedY)
    + effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BulletPlusProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml