@startuml
'https://plantuml.com/class-diagram
class EliteEnemy {
    + createProps():List<BaseProp>
}
abstract class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
	+ {abstract} effect(AbstractAircraft aircraft):void
}
interface PropFactory
{
+ {abstract} createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
EliteEnemy ..> BaseProp
EliteEnemy ..> PropFactory

class BloodPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
class BombPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
class BulletPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
PropFactory <|.. BloodPropFactory
PropFactory <|.. BombPropFactory
PropFactory <|.. BulletPropFactory

class BloodProp
{
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
	+ effect(AbstractAircraft aircraft):void
}

class BombProp
{
    + BombProp(int locationX, int locationY, int speedX, int speedY)
	+ effect(AbstractAircraft aircraft):void
}

class BulletProp
{
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
	+ effect(AbstractAircraft aircraft):void
}
BulletPropFactory ..> BulletProp : create
BloodPropFactory ..> BloodProp : create
BombPropFactory ..> BombProp : create

BaseProp <|-- BulletProp
BaseProp <|-- BloodProp
BaseProp <|-- BombProp
@enduml