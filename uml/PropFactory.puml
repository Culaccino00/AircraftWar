@startuml
'https://plantuml.com/class-diagram

interface PropFactory
{
    + {abstract} createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}

class BloodPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
class BombPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
class BulletPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
class BulletPlusPropFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY): BaseProp
}
PropFactory <|.. BloodPropFactory
PropFactory <|.. BombPropFactory
PropFactory <|.. BulletPropFactory
PropFactory <|.. BulletPlusPropFactory


abstract class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
	+ {abstract} effect(AbstractAircraft aircraft):void
}

class BloodProp
{
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
	+ effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BloodProp

class BombProp
{
    - observerList:List<Observer>

    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + addObserver(Observer observer):void
    + notifyAllFlyings():void
	+ effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BombProp

class BulletProp
{
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
	+ effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BulletProp

class BulletPlusProp
{
    + BulletPlusProp(int locationX, int locationY, int speedX, int speedY)
    + effect(AbstractAircraft aircraft):void
}
BaseProp <|-- BulletPlusProp

BulletPropFactory ..> BulletProp : create
BloodPropFactory ..> BloodProp : create
BombPropFactory ..> BombProp : create
BulletPlusPropFactory ..> BulletPlusProp : create

@enduml